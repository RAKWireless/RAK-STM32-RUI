/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : stm32l5xx_hal_msp.c
  * Description        : This file provides code for the MSP Initialization
  *                      and de-Initialization codes.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "uhal_gpio.h"
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN Define */

/* USER CODE END Define */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN Macro */

/* USER CODE END Macro */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* External functions --------------------------------------------------------*/
/* USER CODE BEGIN ExternalFunctions */

/* USER CODE END ExternalFunctions */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}


/**
* @brief RTC MSP Initialization
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(hrtc->Instance==RTC)
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
    {
      Error_Handler();
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
    __HAL_RCC_RTCAPB_CLK_ENABLE();
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}

/**
* @brief RTC MSP De-Initialization
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
    __HAL_RCC_RTCAPB_CLK_DISABLE();

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}


#if 0 //Define in uhal_adc.c
/**
* @brief ADC MSP Initialization
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC)
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
    
    //ADC1
    if(PinToGPIOx(_ADC1) == GPIOA) {
        __HAL_RCC_GPIOA_CLK_ENABLE();
    } else if (PinToGPIOx(_ADC1) == GPIOB) {
        __HAL_RCC_GPIOB_CLK_ENABLE();
    }

    //ADC2
    if(PinToGPIOx(_ADC2) == GPIOA) {
        __HAL_RCC_GPIOA_CLK_ENABLE();
    } else if (PinToGPIOx(_ADC2) == GPIOB) {
        __HAL_RCC_GPIOB_CLK_ENABLE();
    }

    //ADC3
    if(PinToGPIOx(_ADC3) == GPIOA) {
        __HAL_RCC_GPIOA_CLK_ENABLE();
    } else if (PinToGPIOx(_ADC3) == GPIOB) {
        __HAL_RCC_GPIOB_CLK_ENABLE();
    }
    
    //ADC4
    if(PinToGPIOx(_ADC4) == GPIOA) {
        __HAL_RCC_GPIOA_CLK_ENABLE();
    } else if (PinToGPIOx(_ADC4) == GPIOB) {
        __HAL_RCC_GPIOB_CLK_ENABLE();
    }

    //ADC5
    if(PinToGPIOx(_ADC5) == GPIOA) {
        __HAL_RCC_GPIOA_CLK_ENABLE();
    } else if (PinToGPIOx(_ADC5) == GPIOB) {
        __HAL_RCC_GPIOB_CLK_ENABLE();
    }

    /**ADC GPIO Configuration
    PB3     ------> _ADC1
    PB4     ------> _ADC2
    PB2     ------> _ADC3
    PA10    ------> _ADC4
    PA15    ------> _ADC5
    */
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    //ADC1
    GPIO_InitStruct.Pin = PinToGPIO_Pin(_ADC1);
    HAL_GPIO_Init(PinToGPIOx(_ADC1), &GPIO_InitStruct);

    //ADC2
    GPIO_InitStruct.Pin = PinToGPIO_Pin(_ADC2);
    HAL_GPIO_Init(PinToGPIOx(_ADC2), &GPIO_InitStruct);

    //ADC3
    GPIO_InitStruct.Pin = PinToGPIO_Pin(_ADC3);
    HAL_GPIO_Init(PinToGPIOx(_ADC3), &GPIO_InitStruct);

    //ADC4
    GPIO_InitStruct.Pin = PinToGPIO_Pin(_ADC4);
    HAL_GPIO_Init(PinToGPIOx(_ADC4), &GPIO_InitStruct);

    //ADC5
    GPIO_InitStruct.Pin = PinToGPIO_Pin(_ADC5);
    HAL_GPIO_Init(PinToGPIOx(_ADC5), &GPIO_InitStruct);

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}

/**
* @brief ADC MSP De-Initialization
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC)
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();

    /**ADC GPIO Configuration
    PB3     ------> _ADC1
    PB4     ------> _ADC2
    PB2     ------> _ADC3
    PA10    ------> _ADC4
    PA15    ------> _ADC5
    */
    HAL_GPIO_DeInit(PinToGPIOx(_ADC1), PinToGPIO_Pin(_ADC1));
    HAL_GPIO_DeInit(PinToGPIOx(_ADC2), PinToGPIO_Pin(_ADC2));
    HAL_GPIO_DeInit(PinToGPIOx(_ADC3), PinToGPIO_Pin(_ADC3));
    HAL_GPIO_DeInit(PinToGPIOx(_ADC4), PinToGPIO_Pin(_ADC4));
    HAL_GPIO_DeInit(PinToGPIOx(_ADC5), PinToGPIO_Pin(_ADC5));

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }

}
#endif

/**
* @brief TIM_PWM MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
  } else if (htim_pwm->Instance==TIM2) {
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
  }
}

/**
* @brief TIM_PWM MSP De-Initialization
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
  {
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
  } else if (htim_pwm->Instance==TIM2) {
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
  }

}


void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
  if(hcryp->Instance==AES)
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
    /* AES interrupt Init */
    HAL_NVIC_SetPriority(AES_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(AES_IRQn);
  /* USER CODE BEGIN AES_MspInit 1 */
  /* USER CODE END AES_MspInit 1 */
  }

}


void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* hcryp)
{
  if(hcryp->Instance==AES)
  {
  /* USER CODE BEGIN AES_MspDeInit 0 */

  /* USER CODE END AES_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_AES_CLK_DISABLE();

    /* AES interrupt DeInit */
    HAL_NVIC_DisableIRQ(AES_IRQn);
  /* USER CODE BEGIN AES_MspDeInit 1 */
  /* Disable CRYP Interrupt */
  /* USER CODE END AES_MspDeInit 1 */
  }

}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
